
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000228  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000103b8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004b5  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000111  00000000  00000000  0001089d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  000109b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fbe  00000000  00000000  00010a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000502  00000000  00000000  00011a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004007  00000000  00000000  00011f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00015f2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  00015f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000398 	.word	0x08000398

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000398 	.word	0x08000398

080001c8 <delay_us>:

	while((TIM7->SR & TIM_SR_UIF) == 0);
}

void delay_us(uint32_t us)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (us == 0)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d026      	beq.n	8000224 <delay_us+0x5c>
		return;

	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM7EN;
 80001d6:	4b16      	ldr	r3, [pc, #88]	; (8000230 <delay_us+0x68>)
 80001d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80001da:	4a15      	ldr	r2, [pc, #84]	; (8000230 <delay_us+0x68>)
 80001dc:	f043 0320 	orr.w	r3, r3, #32
 80001e0:	6593      	str	r3, [r2, #88]	; 0x58
	TIM7->CR1 &= ~TIM_CR1_CEN;
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <delay_us+0x6c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a13      	ldr	r2, [pc, #76]	; (8000234 <delay_us+0x6c>)
 80001e8:	f023 0301 	bic.w	r3, r3, #1
 80001ec:	6013      	str	r3, [r2, #0]
	TIM7->SR = 0;
 80001ee:	4b11      	ldr	r3, [pc, #68]	; (8000234 <delay_us+0x6c>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]
	TIM7->CNT = 0;
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <delay_us+0x6c>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM7->PSC = 79;
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <delay_us+0x6c>)
 80001fc:	224f      	movs	r2, #79	; 0x4f
 80001fe:	629a      	str	r2, [r3, #40]	; 0x28
	TIM7->ARR = us -1;
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <delay_us+0x6c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3b01      	subs	r3, #1
 8000206:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM7->CR1 |= TIM_CR1_CEN;
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <delay_us+0x6c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <delay_us+0x6c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6013      	str	r3, [r2, #0]

	while((TIM7->SR & TIM_SR_UIF) == 0);
 8000214:	bf00      	nop
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <delay_us+0x6c>)
 8000218:	691b      	ldr	r3, [r3, #16]
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f9      	beq.n	8000216 <delay_us+0x4e>
 8000222:	e000      	b.n	8000226 <delay_us+0x5e>
		return;
 8000224:	bf00      	nop
}
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	40021000 	.word	0x40021000
 8000234:	40001400 	.word	0x40001400

08000238 <GPIO_Clock_Enable>:

void GPIO_Clock_Enable()
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOAEN;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <GPIO_Clock_Enable+0x1c>)
 800023e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000240:	4a04      	ldr	r2, [pc, #16]	; (8000254 <GPIO_Clock_Enable+0x1c>)
 8000242:	f043 0303 	orr.w	r3, r3, #3
 8000246:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000

08000258 <GPIO_Pin_Init>:

void GPIO_Pin_Init()
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	GPIOB->MODER &= ~(3UL<<4);
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 8000262:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000266:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 1UL<<4;
 8000268:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6013      	str	r3, [r2, #0]


	GPIOB->OTYPER &= ~(1<<2);
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 800027a:	f023 0304 	bic.w	r3, r3, #4
 800027e:	6053      	str	r3, [r2, #4]

	GPIOB->OSPEEDR &= ~(3UL<<4);
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 8000286:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800028a:	6093      	str	r3, [r2, #8]

	GPIOB->PUPDR &= ~(3UL<<4);
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <GPIO_Pin_Init+0x6c>)
 8000292:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000296:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~3UL;
 8000298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~3UL;
 80002a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b2:	f023 0303 	bic.w	r3, r3, #3
 80002b6:	60d3      	str	r3, [r2, #12]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	48000400 	.word	0x48000400

080002c8 <main>:

int main()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	GPIO_Clock_Enable();
 80002cc:	f7ff ffb4 	bl	8000238 <GPIO_Clock_Enable>
	GPIO_Pin_Init();
 80002d0:	f7ff ffc2 	bl	8000258 <GPIO_Pin_Init>
	GPIOB->ODR |= 1UL<<2;
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <main+0x30>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <main+0x30>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6153      	str	r3, [r2, #20]
 	while(1)
 	{
 		GPIOB->ODR ^= GPIO_ODR_ODR_2;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <main+0x30>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <main+0x30>)
 80002e6:	f083 0304 	eor.w	r3, r3, #4
 80002ea:	6153      	str	r3, [r2, #20]
 		delay_us(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f0:	f7ff ff6a 	bl	80001c8 <delay_us>
 		GPIOB->ODR ^= GPIO_ODR_ODR_2;
 80002f4:	e7f4      	b.n	80002e0 <main+0x18>
 80002f6:	bf00      	nop
 80002f8:	48000400 	.word	0x48000400

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffcb 	bl	80002c8 <main>

08000332 <LoopForever>:

LoopForever:
    b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC1_2_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	; (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	; (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	; (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
